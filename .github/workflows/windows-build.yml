name: Windows build

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Run PyInstaller
        run: |
          python -m PyInstaller app.spec

      - name: Install NSIS
        run: |
          choco install nsis -y
          # Make sure we can find the NSIS executable
          $NsisPath = "C:\Program Files (x86)\NSIS"
          Write-Host "Adding NSIS to PATH: $NsisPath"
          echo "$NsisPath" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          # Wait for path update
          Start-Sleep -Seconds 5

      - name: Build NSIS installer
        run: |
          $Version = (Get-Content -Path "${{ github.workspace }}\version.txt").Trim()
          Write-Host "Building installer for version $Version"
          $ProjectDir = "${{ github.workspace }}"
          $MakensisPath = "C:\Program Files (x86)\NSIS\makensis.exe"
          
          # Check if makensis exists
          if (Test-Path $MakensisPath) {
              Write-Host "Found makensis at: $MakensisPath"
              & "$MakensisPath" /XPROJECT_DIR="$ProjectDir" /XVERSION="$Version" "$ProjectDir\installer\nsis\installer.nsi"
          } else {
              Write-Host "Error: makensis not found at expected path"
              Write-Host "Searching for makensis..."
              Get-ChildItem -Path "C:\Program Files (x86)" -Recurse -Filter "makensis.exe" -ErrorAction SilentlyContinue | ForEach-Object { Write-Host "Found at: $($_.FullName)" }
              exit 1
          }
        shell: pwsh

      - name: Prepare artifacts
        run: |
          $Version = (Get-Content -Path "${{ github.workspace }}\version.txt").Trim()
          Write-Host "Version: $Version"
          Write-Host "Installer: AndroidTVRemote-$Version-Installer.exe"
          
          # Check if installer exists and rename for clarity in artifacts list
          if (Test-Path "AndroidTVRemote-$Version-Installer.exe") {
            Copy-Item -Path "AndroidTVRemote-$Version-Installer.exe" -Destination "AndroidTVRemote-Installer.exe" -Force
            Write-Host "Installer found and renamed for clarity in artifacts"
          } else {
            Write-Host "Warning: Installer not found at expected path"
          }
        shell: pwsh
        
      - name: Upload app build
        uses: actions/upload-artifact@v4
        with:
          name: app-build
          path: dist/AndroidTVRemote/**
          
      - name: Upload installer (if exists)
        uses: actions/upload-artifact@v4
        if: ${{ success() }}
        continue-on-error: true
        with:
          name: installer
          path: |
            AndroidTVRemote-*-Installer.exe
            AndroidTVRemote-Installer.exe